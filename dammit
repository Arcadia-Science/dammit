#!/usr/bin/env python
from __future__ import print_function

import argparse
import sys
import os

import common
import annotate
import databases
import dependencies
from tasks import print_tasks

def get_database_dir(args):
    # By default, we store databases in the home directory
    db_dir = args.database_dir
    if db_dir is None:
        db_dir = os.path.join(os.environ['HOME'], 
                              common.CONFIG['settings']['db_dir'])
    return os.path.abspath(db_dir)


def handle_databases(args):

    # TODO: Check that directory exists
    db_dir = get_database_dir(args)
    print('DB_DIR', db_dir, file=sys.stderr)

    databases, tasks = databases.get_database_tasks(db_dir,
                                                    args.busco_group,
                                                    args.full)
    if args.install:
        databases.run_install_databases(db_dir, tasks)
    else:
        databases.run_install_databases(db_dir, tasks, ['list'])


def handle_dependencies(args):
    
    dep_dir = dependencies.get_dependency_dir()
    print('DEP_DIR', dep_dir, file=sys.stderr)
    try:
        os.makedirs(dep_dir)
    except OSError:
        # Already exists
        pass

    paths, tasks = dependencies.get_dependency_tasks()
   
    if args.debug:
        print_tasks(tasks)

    if args.install:
        dependencies.run_install_dependencies(tasks)
    else:
        dependencies.run_install_dependencies(tasks, ['list'])


def handle_annotate(args):

    transcriptome = args.transcriptome
    out_dir = args.output_dir
    if out_dir is None:
        out_dir = transcriptome + '.dammit'
    out_dir = os.path.abspath(out_dir)

    try:
        os.mkdir(out_dir)
    except OSError:
        # Already exists, carry on
        pass

    prog_paths, _ = dependencies.get_install_dependencies_tasks()

    db_dir = get_database_dir(args)
    databases, _ = databases.get_database_tasks(db_dir, 
                                                args.busco_group,
                                                args.full)

    tasks = annotate.get_annotate_tasks(transcriptome, out_dir,
                                        prog_paths, databases)

    if args.debug:
        print_tasks(tasks)

    annotate.run_annotate_tasks(transcriptome, out_dir, tasks)

def main():
    parser = argparse.ArgumentParser()
   
    parser.add_argument('--database-dir', default=None)
    parser.add_argument('--debug', action='store_true', default=False)
    parser.add_argument('--full', action='store_true', default=False,
                        help='Do full annotation with uniref90')
    
    subparsers = parser.add_subparsers()
    
    databases_parser = subparsers.add_parser('databases')
    databases_parser.add_argument('--install', action='store_true',
                                  default=False)
    databases_parser.set_defaults(func=handle_databases)

    dependencies_parser = subparsers.add_parser('dependencies')
    dependencies_parser.add_argument('--install', action='store_true',
                                     default=False)
    dependencies_parser.set_defaults(func=handle_dependencies)

    annotate_parser = subparsers.add_parser('annotate')
    annotate_parser.add_argument('-o', '--output-dir', default=None)
    annotate_parser.add_argument('--busco-group', default='metazoa')
    annotate_parser.add_argument('--n_threads', type=int, default=1)
    annotate_parser.add_argument('--user-databases', nargs='+')
    annotate_parser.add_argument('transcriptome')
    annotate_parser.set_defaults(func=handle_annotate)

    args, doit_args = parser.parse_known_args()

    # Print out the infos~
    print(common.CONFIG['meta']['description'], file=sys.stderr)
    print(', '.join(common.CONFIG['meta']['authors']), common.CONFIG['meta']['date'], 
          file=sys.stderr)

    args.func(args)

    '''
    BLAST
    '''
    '''
    blast_iters = []
    for fn in resources_df[resources_df.meta_type == 'assembly'].filename:

        blast_iters.extend([blast_task(row, config, fn) \
                    for _, row in resources_df[(resources_df.meta_type == 'fasta_database') &
                                               (resources_df.meta_type != 'assembly')].iterrows()])

    blast_iters.extend([blast_task(row, config, resources_df.ix['petMar2_cdna'].filename) \
                    for _, row in resources_df[(resources_df.meta_type == 'fasta_database') &
                                               (resources_df.filename != 'petMar2.cdna.fa')].iterrows()])

    blast_tasks = []
    for tskiter in blast_iters:
        blast_tasks.extend([dict_to_task(tsk) for tsk in tskiter])
    tasks.extend(blast_tasks)
    tasks.append(group_task('blast', [t.name for t in blast_tasks]))
    '''
    '''
    TransDecoder and hmmscan
    '''
    '''
    tdc_tasks = []
    dbfn = resources_df.ix['pfamA'].filename
    tdc_tasks.append(transdecoder_orf_task(assembly_fn, config['pipeline']['transdecoder']))
    pep_fn = os.path.join(assembly_fn+'.transdecoder_dir', 'longest_orfs.pep')
    tdc_tasks.append(hmmscan_task(pep_fn, assembly_fn + '.pfam-A.out', dbfn, 
                                  config['pipeline']['hmmscan']))
    tdc_tasks.append(transdecoder_predict_task(assembly_fn, assembly_fn + '.pfam-A.out',
                     config['pipeline']['transdecoder']))
    tasks.extend(tdc_tasks)
    tasks.append(group_task('transdecoder', [t.name for t in tdc_tasks]))
    '''
    '''
    BUSCO
    '''

    '''
    infernal and Rfam
    '''
    '''
    cmscan_cfg = config['pipeline']['cmscan']
    cmscan_tasks = []
    cmscan_tasks.append(download_and_untar_task(resources_df.ix['rfam'].url,
                                                cmscan_cfg['db_dir'],
                                                label='rfam'))


    ann_task = aggregate_annotations_task(assembly_fn, blast_targets, 
                                          assembly_fn+'.transdecoder.gff3',
                                          assembly_fn+'.pfam-A.out', sample_df,
                                          assembly_fn+'.eXpress.tpm.tsv',
                                          assembly_fn+'.annotations.h5')
    tasks.append(ann_task)
    '''
    

if __name__ == '__main__':
    main()
